#!/usr/bin/python3
import sys
import random
import time
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
import re

class TreeNode(object):
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
        self.height = 1

def find_min(node):
    """Find min value node"""
    while node and node.left:
        node = node.left
    return node


def find_max(node):
    """Find max value node"""
    while node and node.right:
        node = node.right
    return node

def find(value, node):
    """Find node with val equal to value"""
    while node:
        if value < node.val:
            node = node.left
        elif value > node.val:
            node = node.right
        else:
            return node

def insert(value, node):
    """Insert value into node by following BST properties"""
    if node is None:
        return TreeNode(value)

    if value < node.val:
        node.left = insert(value, node.left)

    elif value > node.val:
        node.right = insert(value, node.right)
    else:
        # duplicate, ignore it
        return node
    return node
"""insert the value and balance"""
def insert_balance( root, key):
    # Step 1 - Perform normal BST 
    if not root: 
        return TreeNode(key) 
    elif key < root.val: 
        root.left = insert_balance(root.left, key) 
    else: 
        root.right = insert_balance(root.right, key) 

    # Step 2 - Update the height of the  
    # ancestor node 
    root.height = 1 + max(getHeight(root.left), 
                        getHeight(root.right)) 

    # Step 3 - Get the balance factor 
    balance = getBalance(root) 

    # Step 4 - If the node is unbalanced,  
    # then try out the 4 cases 
    # Case 1 - Left Left 
    if balance > 1 and key < root.left.val: 
        return rightRotate(root) 

    # Case 2 - Right Right 
    if balance < -1 and key > root.right.val: 
        return leftRotate(root) 

    # Case 3 - Left Right 
    if balance > 1 and key > root.left.val: 
        root.left = leftRotate(root.left) 
        return rightRotate(root) 

    # Case 4 - Right Left 
    if balance < -1 and key < root.right.val: 
        root.right = rightRotate(root.right) 
        return leftRotate(root) 

    return root 
def leftRotate(z): 
    y = z.right 
    T2 = y.left 

    # Perform rotation 
    y.left = z 
    z.right = T2 

    # Update heights 
    z.height = 1 + max(getHeight(z.left), 
                        getHeight(z.right)) 
    y.height = 1 + max(getHeight(y.left), 
                        getHeight(y.right)) 

    # Return the new root 
    return y 

def rightRotate(z): 
    y = z.left 
    T3 = y.right 

    # Perform rotation 
    y.right = z 
    z.left = T3 

    # Update heights 
    z.height = 1 + max(getHeight(z.left), 
                    getHeight(z.right)) 
    y.height = 1 + max(getHeight(y.left), 
                    getHeight(y.right)) 

    # Return the new root 
    return y 

def getHeight(root): 
    if not root: 
        return 0

    return root.height 

def getBalance(root): 
    if not root: 
        return 0

    return getHeight(root.left) - getHeight(root.right) 
def delete(value, node):
    """Deletes node from the tree
    Return a pointer to the resulting tree
    """
    if node is None:
        return None

    if value < node.val:
        node.left = delete(value, node.left)
    elif value > node.val:
        node.right = delete(value, node.right)
    elif node.left and node.right:
        tmp_cell = find_min(node.right)
        node.val = tmp_cell.val
        node.right = delete(node.val, node.right)
    else:
        if node.left is None:
            node = node.right
        elif node.right is None:
            node = node.left
    return node

class AsciiNode(object):
    left = None
    right = None

    # length of the edge from this node to its children
    edge_length = 0
    height = 0
    lablen = 0

    # -1 = left, 0 = root, 1 = right
    parent_dir = 0

    # max supported unit32 in dec, 10 digits max
    label = ''


MAX_HEIGHT = 1000
lprofile = [0] * MAX_HEIGHT
rprofile = [0] * MAX_HEIGHT
INFINITY = (1 << 20)

# adjust gap between left and right nodes
gap = 3

def build_ascii_tree_recursive(t):
    """
    :type t: TreeNode
    """
    if t is None:
        return None

    node = AsciiNode()
    node.left = build_ascii_tree_recursive(t.left)
    node.right = build_ascii_tree_recursive(t.right)

    if node.left:
        node.left.parent_dir = -1

    if node.right:
        node.right.parent_dir = 1

    node.label = '{}'.format(t.val)
    node.lablen = len(node.label)
    return node

# Copy the tree into the ascii node structure
def build_ascii_tree(t):
    if t is None:
        return None
    node = build_ascii_tree_recursive(t)
    node.parent_dir = 0
    return node

# The following function fills in the lprofile array for the given tree.
# It assumes that the center of the label of the root of this tree
# is located at a position (x,y).  It assumes that the edge_length
# fields have been computed for this tree.
def compute_lprofile(node, x, y):
    if node is None:
        return

    isleft = (node.parent_dir == -1)
    lprofile[y] = min(lprofile[y], x - ((node.lablen - isleft) // 2))
    if node.left:
        i = 1
        while (i <= node.edge_length and y + i < MAX_HEIGHT):
            lprofile[y + i] = min(lprofile[y + i], x - i)
            i += 1

    compute_lprofile(node.left, x - node.edge_length - 1, y + node.edge_length + 1)
    compute_lprofile(node.right, x + node.edge_length + 1, y + node.edge_length + 1)

def compute_rprofile(node, x, y):
    if node is None:
        return

    notleft = (node.parent_dir != -1)
    rprofile[y] = max(rprofile[y], x + ((node.lablen - notleft) // 2))
    if node.right is not None:
        i = 1
        while i <= node.edge_length and y + i < MAX_HEIGHT:
            rprofile[y + i] = max(rprofile[y + i], x + i)
            i += 1

    compute_rprofile(node.left, x - node.edge_length - 1, y + node.edge_length + 1)
    compute_rprofile(node.right, x + node.edge_length + 1, y + node.edge_length + 1)

# This function fills in the edge_length and
# height fields of the specified tree
def compute_edge_lengths(node):
    if node is None:
        return
    compute_edge_lengths(node.left)
    compute_edge_lengths(node.right)

    # first fill in the edge_length of node
    if (node.right is None and node.left is None):
        node.edge_length = 0
    else:
        if node.left:
            i = 0
            while (i < node.left.height and i < MAX_HEIGHT):
                rprofile[i] = -INFINITY
                i += 1
            compute_rprofile(node.left, 0, 0)
            hmin = node.left.height
        else:
            hmin = 0

        if node.right is not None:
            i = 0
            while (i < node.right.height and i < MAX_HEIGHT):
                lprofile[i] = INFINITY
                i += 1
            compute_lprofile(node.right, 0, 0)
            hmin = min(node.right.height, hmin)
        else:
            hmin = 0

        delta = 4
        i = 0
        while (i < hmin):
            delta = max(delta, gap + 1 + rprofile[i] - lprofile[i])
            i += 1

        # If the node has two children of height 1, then we allow the
        # two leaves to be within 1, instead of 2
        if (((node.left is not None and node.left.height == 1) or (
                        node.right is not None and node.right.height == 1)) and delta > 4):
            delta -= 1
        node.edge_length = ((delta + 1) // 2) - 1

    # now fill in the height of node
    h = 1
    if node.left:
        h = max(node.left.height + node.edge_length + 1, h)
    if node.right:
        h = max(node.right.height + node.edge_length + 1, h)
    node.height = h

# used for printing next node in the same level,
# this is the x coordinate of the next char printed
print_next = 0

node_x = []
node_y = []
final_draw_number = []
temp_x = 0
temp_y = 0
# This function prints the given level of the given tree, assuming
# that the node has the given x coordinate.
def print_level(node, x, level):
    global temp_x 
    global print_next
    global final_draw_number

    if node is None:
        return
    isleft = (node.parent_dir == -1)
    if level == 0:
        spaces = (x - print_next - ((node.lablen - isleft) // 2))
        sys.stdout.write(' ' * spaces)
        temp_x += spaces + 1

        node_x.append(temp_x)
        node_y.append(temp_y)
        print_next += spaces
        sys.stdout.write(node.label)
        final_draw_number.append(int(node.label))
        print_next += node.lablen

    elif node.edge_length >= level:
        if node.left:
            spaces = (x - print_next - level)
            sys.stdout.write(' ' * spaces)
            temp_x += spaces + 1
            print_next += spaces
            sys.stdout.write('/')
            print_next += 1

        if node.right:
            spaces = (x - print_next + level)
            sys.stdout.write(' ' * spaces)
            temp_x += spaces + 1
            print_next += spaces
            sys.stdout.write('\\')
            print_next += 1
        
    else:
        same_level = True
        print_level(node.left,
                    x - node.edge_length - 1,
                    level - node.edge_length - 1)
        same_level = True
        print_level(node.right,
                    x + node.edge_length + 1,
                    level - node.edge_length - 1)

# prints ascii tree for given Tree structure
def drawtree(t):
    global temp_x 
    global temp_y 
    if t is None:
        return
    proot = build_ascii_tree(t)
    compute_edge_lengths(proot)
    i = 0
    while (i < proot.height and i < MAX_HEIGHT):
        lprofile[i] = INFINITY
        i += 1

    compute_lprofile(proot, 0, 0)
    xmin = 0
    i = 0
    while (i < proot.height and i < MAX_HEIGHT):
        xmin = min(xmin, lprofile[i])
        i += 1

    i = 0
    global print_next
    while (i < proot.height):
        print_next = 0
        temp_y = i
        temp_x = 0
        print_level(proot, -xmin, i)
        print('')
        i += 1

    if proot.height >= MAX_HEIGHT:
        print(("This tree is taller than %d, and may be drawn incorrectly.".format(MAX_HEIGHT)))

def deserialize(string):
    if string == '{}':
        return None
    nodes = [None if val == '#' else TreeNode(int(val))
             for val in string.strip('[]{}').split(',')]
    kids = nodes[::-1]
    root = kids.pop()
    for node in nodes:
        if node:
            if kids: 
                node.left = kids.pop()
            if kids: 
                node.right = kids.pop()
    return root

def draw_random_bst(n, balanced=False):
    """ Draw random binary search tree of n nodes
    """
    from random import randint
    nums = set()
    max_num = 10 * n
    if 0 < n < MAX_HEIGHT:
        while len(nums) != n:
            nums.add(randint(1, max_num))

    draw_bst(list(nums), balanced=balanced)


def draw_level_order(string):
    """ The serialization of a binary tree follows a level order traversal,
    where '#' signifies a path terminator where no node exists below.
    e.g. '{3,9,20,#,#,15,7}'
          3
         / \
        9  20
           / \
          15 7
    """
    drawtree(deserialize(string))

#global var to keep track of index in deserialize_preorder
currIndex = 0

#deserialize to preorder
def deserialize_preorder(nodes, key, min=float("-infinity"), max=float("infinity")):
    global currIndex
    if currIndex >=  len(nodes): return None

    root = None

    if min < key < max:
        root = TreeNode(key)
        currIndex += 1

        if currIndex < len(nodes):
            root.left = deserialize_preorder(nodes, nodes[currIndex], min, key)

        if currIndex < len(nodes):
            root.right = deserialize_preorder(nodes, nodes[currIndex], key, max)

    return root

# Build bst from (sorted) nodes. Used to auto-balance the tree.
def to_bst(nodes, start, end):
    if start > end: return None

    mid = (start + end) / 2
    root = TreeNode(nodes[int(mid)])

    root.left = to_bst(nodes, start, mid-1)
    root.right = to_bst(nodes, mid+1,end)

    return root

def draw_bst(nodes, preorder=False, postorder=False,balanced=False):
    if not nodes: return

    #Convert list to ints if first element is int, otherwise use list of str
    if re.match("\d", str(nodes[0])):
         nodes = [int(x) for x in nodes]

    if balanced:
        root = TreeNode(nodes[0])
        for num in nodes[1:]:
            root = insert_balance( root,num) 

    elif not preorder and not postorder:
        root = TreeNode(nodes[0])
        for num in nodes[1:]:
            root = insert(num, root)  

    elif preorder:
        if type(nodes[0]) is int:
            root = deserialize_preorder(nodes, nodes[0])
        else:
            #Use "" as lower bound for string. 
            #Append 'z' to max string to act as upper bound.
            root = deserialize_preorder(nodes, nodes[0], "", max(nodes) + "z")

        if currIndex != len(nodes):
            print("Not valid preorder sequence.")

    elif postorder:
        root = None #To do.

    drawtree(root)

class Main(QMainWindow):
    def __init__(self, parent = None):
        QMainWindow.__init__(self, parent)
        self.InitUi()

    def InitUi(self):
        self.textBox = self.CreateTextbox()
        self.button_OK = self.CreateButton_OK()
        self.button_clear = self.CreateButton_clear()
        self.button_insert = self.CreateButton_insert()
        self.button_delete = self.CreateButton_delete()
        self.button_balance = self.CreateButton_balance()

        self.show()
    def CreateTextbox(self):
        lb = QLabel(self, text = "TextBox: ")
        lb.move(180,60)
        textBox = QLineEdit(self)
        textBox.resize(500,30)
        textBox.move(250,60)
        return textBox

    def CreateButton_OK(self):
        button1 = QPushButton(self, text = "OK")
        button1.resize(50,35)
        button1.move(800, 60)
        button1.clicked.connect(lambda: self.setAmount())
        button1.clicked.connect(lambda: print("OK"))
        return button1

    def CreateButton_clear(self):
        button2 = QPushButton(self, text = "clear")
        button2.resize(50,35)
        button2.move(800, 95)
        # button2.clicked.connect(lambda: self.setAmount())
        button2.clicked.connect(lambda: print("clear"))
        return button2

    def CreateButton_insert(self):
        button2 = QPushButton(self, text = "insert")
        button2.resize(50,35)
        button2.move(800, 130)
        button2.clicked.connect(lambda: self.insert_node())
        button2.clicked.connect(lambda: print("insert"))
        return button2

    def CreateButton_delete(self):
        button2 = QPushButton(self, text = "delete")
        button2.resize(50,35)
        button2.move(800, 165)
        button2.clicked.connect(lambda: self.delete_node())
        button2.clicked.connect(lambda: print("delete"))
        return button2
    
    def CreateButton_balance(self):
        button2 = QPushButton(self, text = "balance")
        button2.resize(50,35)
        button2.move(800, 195)
        button2.clicked.connect(lambda: self.balance_node())
        button2.clicked.connect(lambda: print("balance"))
        return button2
    
    def balance_node(self):
        draw_bst(self.numbers, balanced=True)
        for i in range(len(node_x)):
            self.label(final_draw_number[i], node_x[i], node_y[i])

    def insert_node(self):
        text = self.textBox.text()
        self.check = True

        #處理字串 從 "5,2,7,1,7,3" 變成 self.numbers = [5,2,7,1,7,3]
        i = 0
        tmp = ""
        while i < len(text):
            if text[i] == ",":
                self.numbers.append(int(tmp))
                tmp = ""
            if text[i] != ",":
                tmp = tmp + text[i]
            i += 1

        print(self.numbers)
        draw_bst(self.numbers)
        
        for i in range(len(node_x)):
            self.label(final_draw_number[i], node_x[i], node_y[i])

    def delete_node(self):
        text = self.textBox.text()
        self.check = True

        #處理字串 從 "5,2,7,1,7,3" 變成 self.numbers = [5,2,7,1,7,3]
        i = 0
        tmp = ""
        while i < len(text):
            if text[i] == ",":
                self.numbers.remove(int(tmp))
                tmp = ""
            if text[i] != ",":
                tmp = tmp + text[i]
            i += 1

        print(self.numbers)
        draw_bst(self.numbers)
        
        for i in range(len(node_x)):
            self.label(final_draw_number[i], node_x[i], node_y[i])
    def setAmount(self):
        text = self.textBox.text()
        if text == "":
            text = "5,2,7,1,7,3,10,8,4,6"
        self.check = True

        #處理字串 從 "5,2,7,1,7,3" 變成 self.numbers = [5,2,7,1,7,3]
        i = 0
        tmp = ""
        c = []
        while i < len(text):
            if text[i] == ",":
                c.append(int(tmp))
                tmp = ""
            if text[i] != ",":
                tmp = tmp + text[i]
            i += 1
        c.append(int(tmp))
        self.numbers = c
        print(self.numbers)
        draw_bst(self.numbers)
        
        for i in range(len(node_x)):
            self.label(final_draw_number[i], node_x[i], node_y[i])

    def label(self, t, x, y):
        lb = QLabel(self, text = "<font color=\"red\">" + str(t) + "</font>")
        lb.setAlignment(Qt.AlignCenter)
        lb.resize(30,30)
        lb.move((x+10)*10,(y+10)*30)
        lb.setStyleSheet("border: 3px solid blue; border-radius:10px; QFrame{background-color:rgb(0,0,255)}") 
        lb.show() 
        # lb.hide()
        self.button_clear.clicked.connect(lambda: lb.hide()) #clear the label
        self.button_clear.clicked.connect(lambda: node_x.clear()) #clear the label
        self.button_clear.clicked.connect(lambda: node_y.clear()) #clear the label
        self.button_clear.clicked.connect(lambda: final_draw_number.clear()) #clear the label

        self.button_insert.clicked.connect(lambda: lb.hide()) #clear the label
        self.button_insert.clicked.connect(lambda: node_x.clear()) #clear the label
        self.button_insert.clicked.connect(lambda: node_y.clear()) #clear the label
        self.button_insert.clicked.connect(lambda: final_draw_number.clear()) #clear the label
        
        self.button_delete.clicked.connect(lambda: lb.hide()) #clear the label
        self.button_delete.clicked.connect(lambda: node_x.clear()) #clear the label
        self.button_delete.clicked.connect(lambda: node_y.clear()) #clear the label
        self.button_delete.clicked.connect(lambda: final_draw_number.clear()) #clear the label

        self.button_balance.clicked.connect(lambda: lb.hide()) #clear the label
        self.button_balance.clicked.connect(lambda: node_x.clear()) #clear the label
        self.button_balance.clicked.connect(lambda: node_y.clear()) #clear the label
        self.button_balance.clicked.connect(lambda: final_draw_number.clear()) #clear the label

def main():
    app = QApplication(sys.argv)
    main_window = Main()
    main_window.resize(10000,10000)
    main_window.show()
    app.exec_()

if __name__ == "__main__":
    main()

